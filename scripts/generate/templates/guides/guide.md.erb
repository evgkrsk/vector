---
id: todo
title: Todo
description: "TODO"
author_id: TODO
tags: ["type: guide"]
---

In this guide we'll be consuming <%= "`#{source.name}` #{event_from}s" %> and writing them to a `<%= sink.name %>` sink.

<!--truncate-->

## Setup

If you haven't already, install Vector. Here's a script for the lazy:

```bash
curl --proto '=https' --tlsv1.2 -sSf https://sh.vector.dev | sh
```

Or [choose your preferred installation method][docs.installation].

## Configure a Source

Next, create a config file and add a `<%= source.name %>` source.

```toml
<%= config_example(source.options_list, path: "#{source.type.pluralize}.my-source-id", common: true) %>
```

<%- if needs_translation -%>
## Transform Events

<%- converter = event_converter() -%>
We will need to convert the <%= event_from %> events consumed from our `<%= source.name%>` source into
<%= event_to %>s. We can do that with a `<%= converter.name %>` transform.

```toml
<%= config_example(converter.options_list, path: "#{converter.type.pluralize}.converter", common: true) %>
```

<%- sink_input = "converter" -%>
<%- else -%>
<%- sink_input = "my-source-id" -%>
<%- end -%>
## Configure a Sink

Now we configure our sink<%- if needs_translation -%>, making sure to set the input to our converter transform<%- end -%>.

<%- sink_example = with_input(sink, sink_input) -%>
```toml
<%= config_example(sink_example.options_list, path: "#{sink_example.type.pluralize}.my-sink-id", common: true) %>
```

## Deploy



[docs.installation]: /docs/setup/installation/