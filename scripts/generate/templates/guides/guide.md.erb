---
id: <%= "#{source.name}_to_#{sink.name}" %>
title: <%= "Writing #{source.title} Events to #{sink.title}" %>
description: <%= %"Learn how to send #{source.title} events to #{sink.title} with optional enrichments." %>
author_id: TODO
tags: ["type: guide"]
---

# <%= "Writing #{source.title} Events to #{sink.title}" %>

In this guide we'll be consuming <%= "`#{source.name}` #{event_from}s" %> and writing them to a `<%= sink.name %>` sink.

<!--truncate-->

## Setup

If you haven't already, install Vector. Here's a script for the lazy:

```bash
curl --proto '=https' --tlsv1.2 -sSf https://sh.vector.dev | sh
```

Or [choose your preferred installation method][docs.installation].

## Configure a Source

Next, create a config file and add a `<%= source.name %>` source:

```toml
<%= config_example(source.options_list, path: "#{source.type.pluralize}.my-source-id", common: true) %>
```

<%- if needs_conversion -%>
## Transform Events

<%- converter = event_converter() -%>
We will need to convert the <%= event_from %> events consumed from our
`<%= source.name%>` source into <%= event_to %>s. We can do that with a
`<%= converter.name %>` transform:

```toml
<%= config_example(converter.options_list, path: "#{converter.type.pluralize}.converter", common: true) %>
```

Note that for the `inputs` field we specify our `<%= source.name %>` source by
its name `my-source-id`.

<%- enricher_input = "converter" -%>
<%- else -%>
<%- enricher_input = "my-source-id" -%>
<%- end -%>
## (Optional) Enrich Events

As an optional step we're also going to add a `<%= event_enricher_type() %>`
transform that enriches our events:

<%- enricher = with_input(event_enricher(), enricher_input) -%>
```toml
<%= config_example(enricher.options_list, path: "#{enricher.type.pluralize}.enricher", common: true) %>
```

<%- if needs_conversion -%>
Note that for the `inputs` field we specify our <%= event_converter_type() %>`
transform by its name `converter`.
<%- else -%>
Note that for the `inputs` field we specify our `<%= source.name %>` source by
its name `my-source-id`.
<%- end -%>

## Configure a Sink

Now we configure our sink, making sure to set the input to our enrichment
transform. If you chose not to add an enrichment transform then instead set the
input to <%- if needs_conversion -%>our converter transform by its name
`converter`<%- else -%>our source by its name `my-source-id`<%- end -%>.

<%- sink_example = with_input(sink, "enricher") -%>
```toml
<%= config_example(sink_example.options_list, path: "#{sink_example.type.pluralize}.my-sink-id", common: true) %>
```

##Â Run It

That's it, we're ready to execute our pipeline. You can run it locally with:

```sh
vector -c ./config.toml
```

And choose from a range of strategies on [how to deploy it][docs.deployment].

[docs.installation]: /docs/setup/installation/
[docs.deployment]: /docs/setup/deployment/